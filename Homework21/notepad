1) what is element.addEventListener(event, eventHandler, captureFlag) in java script?
The EventTarget.addEventListener() method registers the specified listener on the EventTarget it's called on. The event target may be an Element in a document, the Document itself, a Window, or any other object that supports events.
The addEventListener() method attaches an event handler to the specified element.
The addEventListener() method attaches an event handler to an element without overwriting existing event handlers.You can add many event handlers to one element.
You can add many event handlers of the same type to one element, i.e two "click" events.
You can add event listeners to any DOM object not only HTML elements. i.e the window object.
The addEventListener() method makes it easier to control how the event reacts to bubbling.
When using the addEventListener() method, the JavaScript is separated from the HTML markup, for better readability and allows you to add event listeners even when you do not control the HTML markup.You can easily remove an event listener by using the removeEventListener() method.
Syntax
element.addEventListener(event, function, useCapture);


2) what is a selector in java script?
selectors are patterns used to select the element you want to style.


3) what is id, class, tagName? 
#id Selector
The #id selector styles the element with the specified id.
Syntax
#id {
    css declarations;
}

.class Selector
The .class selector selects elements with a specific class attribute.To select elements with a specific class, write a period (.) character, followed by the name of the class.
You can also specify that only specific HTML elements should be affected by a class. To do this, start with the element name, then write the period (.) character, followed by the name of the class.
Syntax
.class {
    css declarations;
}


5) event propagation?
events allow event-driven programming languages like JavaScript, JScript, ECMAScript, VBScript and Java to register various event handlers/listeners on the element nodes inside a DOM tree.
There is a huge collection of events that can be generated by most element nodes:
Mouse events
Keyboard events
HTML frame/object events
HTML form events
User interface events
Mutation events (notification of any changes to the structure of a document)
Progress events


6) what is event bubbling ane event capturing?
event bubling
child(descendent) event handler is invoked first
parent(ancestor) event hanlder is invoked next
	syntax : 
		.addEventListener(event, handler, captureFlag)

event capturing
parent(ancestor) event handler is invoked first
child(descendent) event hanlder is invoked next
	syntax : 
		.addEventListener(event, handler, captureFlag)
		captureFlag -- true


7) what is event.stopPropagation vs event.stopImmediatePropagation in javascript?
Prevents further propagation of the current event in the capturing and bubbling phases.
Syntax
event.stopPropagation();

Since the .live() method handles events once they have propagated to the top of the document, it is not possible to stop propagation of live events. Similarly, events handled by .delegate() will propagate to the elements to which they are delegated; event handlers bound on any elements below it in the DOM tree will already have been executed by the time the delegated event handler is called. These handlers, therefore, may prevent the delegated handler from triggering by calling event.stopPropagation() or returning false.

Prevents other listeners of the same event from being called.
Syntax
event.stopImmediatePropagation();
In addition to keeping any additional handlers on an element from being executed, this method also stops the bubbling by implicitly calling event.stopPropagation(). To simply prevent the event from bubbling to ancestor elements but allow other event handlers to execute on the same element, we can use event.stopPropagation() instead.
Use event.isImmediatePropagationStopped() to know whether this method was ever called (on that event object).