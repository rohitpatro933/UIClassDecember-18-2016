The Number JavaScript object is a wrapper object allowing you to work with numerical values. A Number object is created using the Number() constructor.

Number.EPSILON
The smallest interval between two representable numbers.
Number.MAX_SAFE_INTEGER
The maximum safe integer in JavaScript (253 - 1).
Number.MAX_VALUE
The largest positive representable number.
Number.MIN_SAFE_INTEGER
The minimum safe integer in JavaScript (-(253 - 1)).
Number.MIN_VALUE
The smallest positive representable number - that is, the positive number closest to zero (without actually being zero).
Number.NaN
Special "not a number" value.
Number.NEGATIVE_INFINITY
Special value representing negative infinity; returned on overflow.
Number.POSITIVE_INFINITY
Special value representing infinity; returned on overflow.
Number.prototype
Allows the addition of properties to a Number object.

Methods
Number.isNaN()
Determine whether the passed value is NaN.
Number.isFinite()
Determine whether the passed value is a finite number.
Number.isInteger()
Determine whether the passed value is an integer.
Number.isSafeInteger()
Determine whether the passed value is a safe integer (number between -(253 - 1) and 253 - 1).
Number.toInteger() 
Used to evaluate the passed value and convert it to an integer (or Infinity), but has been removed.
Number.parseFloat()
The value is the same as parseFloat() of the global object.
Number.parseInt()
The value is the same as parseInt() of the global object.

Number.prototype.toExponential()
Returns a string representing the number in exponential notation.
Number.prototype.toFixed()
Returns a string representing the number in fixed-point notation.
Number.prototype.toLocaleString()
Returns a string with a language sensitive representation of this number. Overrides the Object.prototype.toLocaleString() method.
Number.prototype.toPrecision()
Returns a string representing the number to a specified precision in fixed-point or exponential notation.
Number.prototype.toSource() 
Returns an object literal representing the specified Number object; you can use this value to create a new object. Overrides the Object.prototype.toSource() method.
Number.prototype.toString()
Returns a string representing the specified object in the specified radix (base). Overrides the Object.prototype.toString() method.
Number.prototype.valueOf()
Returns the primitive value of the specified object. Overrides the Object.prototype.valueOf() method.